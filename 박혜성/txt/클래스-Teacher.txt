java API : https://docs.oracle.com/javase/8/docs/api/index.html

package 패키지명;
import 패키지명;
또다른 클래스;

접근제한자  지정예약어  class 클래스명 extends 상위클래스 implements 상위인터페이스 {
3	  4			 5상속 -> 6다형성 -> 7추상화 -> 인터페이스
	멤버필드;		1
	멤버메소드;	1
	생성자;		2
	내부클래스;	5
}

- 클래스 기초 Ⅰ
1. 멤버필드와 멤버메소드   
   - 멤버필드 : 클래스는 새로운 자료형이다. 그 자료형에서 사용할 변수를 선언해서 쓰는데,
              이 변수를 멤버필드라고 한다.
   - 멤버메소드 : 새로운 자료형에 기능을 넣어서 만들 수 있는데, 그 기능을 담당
     - 접근제한자 지정예약어  반환형  메소드명(매개변수 ....){
		....
		return 반환값;
       }	
       - 반환형의 종류
         - void			: 1byte, 반환할 내용이 없다고 알려주는 신호
         - 기본자료형		: boolean, int, short.....
         - 사용자정의자료형(클래스)	: String과 같은 클래스들...	
       - 매개변수 : 메소드를 실행할때 사용하는 초기값을 받는 곳
                  매개변수는 없을 수도 있고, 많을 수도 있다.
                  메소드는 매개변수에 따라 구별이 된다(메소드 오버로딩)
       - return : 반환형에 맞는 값을 적어준다.
                  void일때는 적지 않아도 된다.
		  메소드의 끝을 알려준다. 메소드 중간에 조건을 넣어 return을 할 수도 있다.
   
2. 생성자
   - 클래스 이름과 똑같은 메소드
   - 객체 생성시 멤버필드의 초기값을 설정
   - 반환형이 없다.
   - 객체를 생성할때 딱 한번 호출되어 실행이 되는 메소드
   - 일반 메소드와는 틀리게 반복 호출하지 못한다.
   - 생성자를 정의하지 않으면 JVM이 알아서 default생성자를 만든다
   - 생성자가 정의가 되면 JVM은 default생성자를 만들지 않는다
   - 메소드의 일부라서 오버로딩이 된다.

※ this 예약어와 this()메소드
   this : 멤버필드와 매개변수의 이름이 같을경우, 멤버필드라고 표시를 해주는 예약어
          원래 멤버메소드에서 멤버필드값을 쓰려면 this를 붙혀야 하는데
          겹치는 변수가 없다면 생략가능하고(JVM이 알아서 붙혀준다)
          매개변수나 기타 변수와 겹치면 this를 붙혀 컴퓨터에게 알려준다
   this() : 객체를 생성할때 생성자로 초기값을 부여하는데, 이미 다른 생성자에서
            초기값이 부여되었다면 또 쓸 필요없이 그 생성자를 호출하면 되는데
            이때 사용하는 메소드가 this()이다.
            사용법은 TestObject11번을 참조.

※ 클래스 배열
   - 클래스를 객체로 만들고 사용하는데 여러개를 사용할때는 배열을 이용하여
     사용할 수 있다.
     이때 처음에 설정하는 값이 배열의 크기를 설정하고, 그 크기만큼
     각각 객체를 생성해서 사용해야 한다.

3. 접근제한자
  - private		: 클래스 내부에서만 접근 가능
  - package(default)	: 표시하지 않는다. 같은 패키지(폴더) 내에서만 접근 가능
  - protected		: 상속관계에서는 public, 상속관계가 아닌 곳에서는 default 처럼 접근
  - public		: 어디서나 접근 가능(접근허용자)

  - 멤버필드는 private을 주로 사용, 생성자, 멤버메소드는 public을 많이 사용한다.
 
  ※ 객체지향언어(OOL - Object Oriented Language) 
    - 은닉화 : 자바에서의 은닉화는 private을 선언해 주는 것
    - 상속성
    - 다형성
    - 추상화

4. 지정예약어
  - 클래스
    - static
    - final		: 상속하지 못하게 하겠다
    - abstract		: 추상클래스

  - 멤버필드
    - static		: 공용의, 공통의, 프로그램 시작시 메모리에 올라간다, 클래스이름으로 접근
    - final		: 객체생성시 딱 한번 초기값이 주어지고, 프로그램에서는 변경 불가
    - static final	: 자바에서 상수선언할때 사용!!
    - transient		: 멤버필드를 전송하지 않고자 할때, 파일I/O나 network상에서..

  - 멤버메소드
    - static		: 멤버필드의 static과 동일, static멤버만 사용 가능
    - final		: 상속관계에서 이 메소드를 오버라이드 하지 못하게 하겠다
    - static final	: static기능과 final기능을 모두 갖춘 메소드
    - abstract		: 추상화
    - synchronized	: 동기화, 멀티스레드
    - native		: JNI(Java Native Interface)

5. 내부클래스
- 클래스 기초 Ⅱ
6. 상속
7. 다형성
8. 추상화
9. 인터페이스

- 클래스응용(API활용)





