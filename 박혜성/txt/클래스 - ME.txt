package 패키지명; 
import 패키지명;
또 다른 클래스;

접근제한자 -3 지정예약어 -4 class 클래스이름 extends 상위클래스 implements 상위인터페이스 {
					
	멤버필드; ---1
	멤버메소드; ---1
	생성자; ---2
	내부클래스; ---5
}

< 클래스 기초 1 >
1.멤버필드와 멤버메소드
class A01{
	멤버필드->클래스 내부에서 사용할 변수 선언
	public static void main(String args[]){
		int a->멤버필드가 아님 : 클래스가 아닌 클래스에 있는 main메소드안에서 선언됐기 때문.
	}
}

기능 구현이 포함된 구조체 -> class
기능->멤버메소드

-멤버필드 : 클래스는 새로운 자료형이다. 그 자료형에서 사용할 변수를 선언해서 쓰는데, 이 변수를 멤버필드라고 한다.
-멤버메소드 : 새로운 자료형에 기능을 넣어서 만들수 있는데, 그 기능을 담당한다.
	접근제한자 지정예약어 반환형 메소드이름 ( 매개변수 1, 매개변수 2, ..... ){
		~
		.....		
		~
		return 반환값 ;
	}

	반환형 : 메모리에다가 메소드의 실행결과를 담을 변수의 크기를 지정하기위해
	-void  : 1바이트 , void는 반환값이 없는 것이 아니다. void는 반환값이 없다고 알려주는 신호이다.
	-기본자료형 : boolean,int,short...
	-사용자정의자료형(클래스) : String과 같은 클래스도 반환형으로 사용할 수 있다.
	
	매개변수  : 매소드를 실행할 때 사용하는 초기값을 받는 곳
	-매개변수는 없을 수도 있고, 많을 수도 있다. 매소드는 매개변수에 따라 구별이 된다.(매소드 오버로딩)
	void disp() 와 void disp(String name)은 다른 메소드이다.
	
	-반환값 return : 반환형에 맞는 값을 적어준다. void - > return ;
	메소드의 끝을 알려준다. 메소드 중간에 조건을 넣어 return을 할 수도 있다.
	
---------------------------------------------------------------------------------------------------------------------------------
2.생성자
-클래스이름과 똑같은 메소드이다.
-객체 생성시 멤버필드의 초기값을 설정하기 위해서이다.
-반환형이 없다 
-객체를 생성할 떄 딱 한번 호출되어 실행이 되는 메소드이다.
	-일반 메소드와는 다르게 반복해서 호출하지 못한다.	
-dafault 생성자 -> 클래스 내에서 생성자가 정의되어있지 않을 시에, JVM이 디폴트 생성자를 정의한다.
	-클래스에 생성자가 하나라도 정의되어있다면 JVM은 디폴트 생성자는 정의되지 않는다.
	-메소드의 일부이기 떄문에 오버로딩이 가능하다.(이름이 같지만 매개변수와 개수,타입이 다른 메소드)

※ this예약어->멤버필드꺼 this가 없으면 매개변수꺼
매개변수와 멤버필드와 동일할떄 멤버필드라고 알려주는 역할을 한다.



객체는 생성자에 의해서 만들어진다. 
클래스는 stack 영역이 아닌 heap영역에 저장된다 -> new 동적메모리할당연산자 사용
stack은 값이 정해져있는 변수가 저장된다. 
따라서 클래스를 선언할 떄 사용하는 변수명은 주소를 담고있다.
만들어진 클래스의 객체에있는 필드를 참조할 때는 ap.a처럼 .을 사용하여 접근할수 있다.
JVM이 자바에서 메모리를 관리한다. heap영역은 gc(garbage collector)가 관리한다.

------------------------------------------------------------------------------------------------------------------------------------
3.접근제한자
/* private < default < protected < public */
 -private : 클래스 내부에서만 접근 가능
 -package(default) : 표시하지않는다 표시하면 에러가난다. 같은 패키지(폴더)내에서만 접근이 가능하다.
 -protected : 상속관계에서는 public , 상속관계가 아닌 곳에서는 default 처럼 접근
 -public : 어디서나 접근 가능(접근허용자)


- 멤버필드는 private를 주로 사용하고 생성자, 멤버메소드는 public를 많이 사용한다
	-? : 객체지향언어(OOL-Objecetive Oriented Language) :
		-특징 4가지 : 은닉화 : 자바에서 은닉화는 private를 선언해 주는 것 
			     상속성 :
			     다형성 : 
			     추상화 : 

<은닉화와 작은의미의 캡슐화> 
private가 붙은 멤버필드를 숨기고 setter,getter메소드를 이용해 간접접근하여 값을 처리하는 것을 캡슐화라고 한다.

setter메소드 : private멤버 수정 : set+멤버필드이름 ex)setName()	
getter메소드 : private멤버 꺼낼때 : get+멤버필드이름 ex)getScore(int score)
----------------------------------------------------------------------------------------------------------------------------------------
4.지정예약어
 -class
  - static
  - final : 상속하지 못하게 하겠다.
  - absract : 추상클래스

 -멤버필드
  - static : 공용의 , 공통의, 프로그램시작시 메모리에 올라간다. 클래스이름. 이름으로 접근한다.
  - final : 객체 생성시 딱 한번 초기값이 주어지고 , 프로그램에서는 변경이 불가하다.
  - static final : 상수 선언 할 떄 사용  ex)원주율
  - transient : 멤버필드를 전송하지 않고자 할 때, 파일I/O나 네트워크상에서 / 클래스를 동작시키는데는 필요하지만 다른 곳으로 전송하거나 할 때 필요하지 않은 멤버필드

 -멤버메소드
  - static : 멤버필드의 static과 동일하다. static멤버필드만 사용 가능하다.
  - final :  상속 관계에서 이 메소드를 오버라이드 하지 못하게 하겠다.
  - static final : static 기능과 final기능을 모두 갖춘 메소드
  - abstract : 추상화
  - sycnhronized : 동기화 , 멀티스레드
  - native	: JNI(Java Native Interface) Ex)다른 언어와 다르게 자바는 JMI가 메모리를 관리함로 메모리에 직접 액세스가 불가능
	 하다. 이때 JNI를 사용
----------------------------------------------------------------------------------------------------------------------------------------
5.내부클래스(중첩클래스) : 클래스이름이 어떻게 만들어지는지, 객체를 어떻게 생성할 수 있는지
 - 일반중첩클래스 
 - static중첩클래스
 - 지역중첩클래스
 - 익명중첩클래스	
----------------------------------------------------------------------------------------------------------------------------------------
< 클래스 기초 2 >
6.상속
 - extends
 - Object class
 - protected : 상속관계에서는 public처럼 접근가능하게 해준다
 - 상속관계 /  포함관계 : 학생은 사람이다 ,, 경찰은 사람이다.. <-상속관계 but, 경찰은 학생이다<-아닌 사람이 더 많다 ..  포함관계 : 경찰 중의 일부는 학생이다(학생을 가지고있다.)
    -사상속관계 : is a 관계 포함관계 : has a 관계
 - Override(오버라이드)
   -/* private < default < protected < public */
    : 부모의 접근제한자 보다 작을수 없다, 즉 , 부모의 접근제한자의 범위보다 같거나 커야한다.
----------------------------------------------------------------------------------------------------------------------------------------
7.다형성
----------------------------------------------------------------------------------------------------------------------------------------
8.추상화
----------------------------------------------------------------------------------------------------------------------------------------
9.인터페이스 - 다중상속을 위해서 
 - 멤버필드 : public static final 멤버필드 == 상수 ex)PI,,
 - 멤버메소드 : public abstract 멤버메소드 (추상 메소드)
 - 생성자 : 없다 (자식이 상속받아서 만들거나 익명중첩클래스를 통해서만들거나)
 - 내부클래스 : static 중첩클래스

----------------------------------------------------------------------------------------------------------------------------------------

< 클래스 응용 - API활용>
 - String클래스
 - Collection  :  자바의 자료구조 : 무한한 데이터의 집합
	ㄴset : 담기만을 위함 , 정렬 X , 재사용(바로바로꺼내서 사용하는 것) X => 전체를 다 찾아봐야 사용가능하다.
		-HashSet , TreeSet
	ㄴMap : 정렬 X , 재사용 O => key-value로 데이터를 찾음 
		키값이 들어가기때문에 set(16)보다 적은 11
		중요함 - 클래스 익히기 
		-HashMap , Hashtable , TreeMap
	ㄴList : 정렬 O 재사용 O 
		-ArrayList , LinkedList , Vector
	ㄴ Generic :  Collection에서 어떤 객체타입으로 만들지 미리 설정해주는 것
	
	ㄴauto-boxing 
 
	Comparable : 기본정렬을 하기 위한 상속받는 인터페이스
	compareTo()메소드를 오버라이드 해줘야 한다.
	이 메소드가 정렬을 나타내는 메소드 입니다.

	Comparator : 내가 기준정렬을 정하여 사용할때 쓰는 인터페이스
	compare()메소드를 오버라이드 해줘야 한다.
	이 메소드 안에서 정렬의 기준을 삼아 처리하면 된다.

	기본자료형을 클래스로 만들 집합 -> WrapperClass
	boolean	: Boolean
	byte	: Byte
	short	: Short
	char	: Character
	int	: Integer
	long	: Long
	float	: Float
	double	: Double

 -  java.lang 패키지  
 -  java.util 패키지
	ㄴ Date와 Calender Class
 -  java.text 패키지
	ㄴSimpleDateFormat  : Date와 함께 많이 쓰인다.
 -  java.util.regex 패키지
 -  java.io 패키지 (File I/O)
 -  java.net 패키지 (네트워크 프로그램)
 -  java.sql (JDBC패키지)
------GUI-------------------------------------------------------------------------------------------------------------------------------
 -  java.awt 패키지
 -  java.awt.event 패키지 
 -  java.swing 패키지
 - java.swing.border 패키지



-----------------------------------------------------------------------------------------------------------------------------------
클래스는 stack 영역이 아닌 heap영역에 저장된다 -> new 동적메모리할당연산자 사용
stack은 값이 정해져있는 변수가 저장된다. 
따라서 클래스를 선언할 떄 사용하는 변수명은 주소를 담고있다.

-----------------------------------------------------------------------------------------------------------------------------------
자바코드에서 생략하는 코드
 - import java.lang.*
 - default 생성자
 - this키워드
 - 0번째 매개변수
 - extends Object
 - 객체명.toString()
 - super() : 부모클래스의 default생성자를 호출하는 것